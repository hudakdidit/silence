// Generated by CoffeeScript 1.9.2
(function() {
  var CONFIG, Scraper, _, configuration, fs, inspect, jf, mkdirp, parse, path, request, rimraf, touch;

  _ = require('lodash');

  fs = require('fs');

  jf = require('jsonfile');

  path = require('path');

  touch = require('touch');

  parse = require('xml-parser');

  rimraf = require('rimraf');

  request = require('request');

  mkdirp = require('mkdirp');

  inspect = require('util').inspect;

  configuration = function() {
    this.domain = process.argv[2];
    this.sitemap = process.argv[3] != null ? "" + this.domain + process.argv[3] : this.domain + "/sitemap.xml";
    this.build = process.argv[4] != null ? process.argv[4] : 'build';
    return this.log = './build/log.json';
  };

  CONFIG = new configuration();

  Scraper = {
    buildPath: path.join(__dirname, CONFIG.build),
    init: function() {
      this.clean();
      return this.fetchSitemap();
    },
    clean: function() {
      return rimraf(this.buildPath, function(err) {
        if (err) {
          throw err;
        }
      });
    },
    log: function(msg, finished) {
      if (finished == null) {
        finished = false;
      }
      jf.writeFile(CONFIG.log, {
        status: msg
      }, (function(_this) {
        return function() {
          if (finished) {
            return _this.log('finished');
          }
        };
      })(this));
      if (msg === 'finished') {
        return this.deleteLog();
      }
    },
    deleteLog: function() {
      return setTimeout((function(_this) {
        return function() {
          return fs.unlink(CONFIG.log, function(err) {
            if (err) {
              throw err;
            }
          });
        };
      })(this), 1000);
    },
    fetchSitemap: function() {
      return request(CONFIG.sitemap, (function(_this) {
        return function(error, response, body) {
          if (error) {
            throw error;
          }
          if (response.statusCode === 200) {
            return mkdirp("" + _this.buildPath, function(err) {
              var xml_object;
              if (err) {
                throw err;
              }
              touch(CONFIG.log);
              _this.log('starting', false);
              xml_object = parse(body);
              return _this.createLinkList(xml_object.root.children);
            });
          }
        };
      })(this));
    },
    createLinkList: function(children) {
      var list;
      list = [];
      _.each(children, function(child, i) {
        return list.push(child.children[0].content);
      });
      _.each(list, (function(_this) {
        return function(link, i) {
          var destination, dir, final;
          dir = link.replace(CONFIG.domain, '');
          destination = _.isEmpty(dir) ? path.join(_this.buildPath, '/') : path.join(_this.buildPath, dir);
          final = i === list.length - 1 ? true : false;
          _this.createPage(link, destination, final);
        };
      })(this));
    },
    createPage: function(url, destination, final) {
      return request(url, (function(_this) {
        return function(error, response, body) {
          if (error) {
            throw error;
          }
          if (response.statusCode === 200) {
            return setTimeout(function() {
              return mkdirp(destination, function(er) {
                var page;
                if (er) {
                  throw er;
                }
                page = destination.replace(_this.buildPath, '');
                return fs.writeFile(destination + "index.html", body, function(er) {
                  if (er) {
                    throw er;
                  }
                  return _this.log("scraping: " + page, final);
                });
              });
            }, 300);
          }
        };
      })(this));
    }
  };

  Scraper.init();

}).call(this);
